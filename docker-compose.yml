version: "3.8"

services:
  backend-java:
    build: .
    container_name: backend-java
    depends_on:
      - kafka
      - zookeeper
      - postgres
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    ports:
      - "8081:8081"
    restart: on-failure
    networks:
      - kafka-net
      - postgres-net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - "backend_java_data:/app"

  zookeeper:
    image: docker.io/bitnami/zookeeper:3.9
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - kafka-net
    volumes:
      - "zookeeper_data:/bitnami"

  kafka:
    image: docker.io/bitnami/kafka:3.4
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
    ports:
      - "9092:9092"
    restart: on-failure
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "kafka:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - kafka-net
    volumes:
      - "kafka_data:/bitnami"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    environment:
      - KAFKA_CLUSTERS_0_NAME=kafka
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    ports:
      - "8080:8080"
    restart: always
    depends_on:
      - kafka
      - zookeeper
    networks:
      - kafka-net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_DB: monitor_transactions_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: 123456
    ports:
      - "5432:5432"
    restart: always
    networks:
      - postgres-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d monitor_transactions_db"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - "postgres_data:/var/lib/postgresql/data"

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@pgadmin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8082:80"
    restart: always
    networks:
      - postgres-net
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  postgres_data:
    driver: local
  backend_java_data:
    driver: local

networks:
  kafka-net:
    driver: bridge
  postgres-net:
    driver: bridge
